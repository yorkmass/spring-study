1.Spring AOP

1).加入 jar 包:

com.springsource.org.aopalliance-1.0.0.jar
com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
spring-aop-4.0.0.RELEASE.jar
spring-aspects-4.0.0.RELEASE.jar

commons-logging-1.1.1.jar
spring-beans-4.0.0.RELEASE.jar
spring-context-4.0.0.RELEASE.jar
spring-core-4.0.0.RELEASE.jar
spring-expression-4.0.0.RELEASE.jar
2).在配置文件中加入aop的命名空间

3）
①.基于注解的方式
<!-- 配置自动扫描的包 -->
<context:component-scan base-package="com.yorkmass.spring.aop.impl"></context:component-scan>
②.在配置文件中加入如下配置
<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
③.吧横切关注点的代码抽象到切面的类中
i.切面首先是一个IOC中的bean，即加入@Component注释
ii.切面还需要加入@Aspect注解
④.在类中声明各种通知:
i:声明一个方法
ii:在方法前加入@Before注解
execution(public int com.yorkmass.spring.aop.impl.ArithmeticCalculator.*(int, int))
execution:执行的意思
也可以改为* com.yorkmass.spring.aop.impl.*.*(int, int)
上面表示为任意修饰符任意返回值impl包里面的所有类所有方法
⑤.可以在通知方法中声明一个类型为 JoinPoint 的参数. 然后就能访问链接细节. 如方法名称和参数值. 
@Aspect
@Component
public class LoggingAspect {
	//声明该方法是一个前置通知:在目标方法开始之前执行
	@Before("execution(public int com.yorkmass.spring.aop.impl.ArithmeticCalculator.*(int, int))")
	public void beforeMethod(JoinPoint joinPoint){
		String methodName=joinPoint.getSignature().getName();
		List<Object> args=Arrays.asList(joinPoint.getArgs());
		System.out.println("The method "+methodName+" begins with"+args);
	}
	
	
}



