<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	<!-- 
	配置bean
	class:bean的全类名。通过反射的方式在IOC容器中创建Bean。所以要求Bean中必须由无参数的构造器
	id:标识容器中的bean,id唯一。	 -->
<bean id="helloworld" class="com.yorkmass.spring.beans.HelloWorld">
<property name="name" value="nihao"></property>
</bean>

	<!-- 通过构造方法来配置bean的属性 
	使用构造器注入属性可以指定参数的位置和参数的类型！以区分重载的构造器！-->
	<bean id="car" class="com.yorkmass.spring.beans.Car">
	<constructor-arg value="Audi" index="0"></constructor-arg>
	<constructor-arg value="shanghai" index="1"></constructor-arg>
	<constructor-arg value="300000" index="2" type="double"></constructor-arg>
	</bean>
	
	<bean id="car2" class="com.yorkmass.spring.beans.Car">
	<constructor-arg value="baoma" type="java.lang.String"></constructor-arg>
	<constructor-arg value="shanghai" type="java.lang.String"></constructor-arg>
	<constructor-arg value="240" type="int"/>
	</bean>
<!-- 如果字面值包含特殊字符可以用<![CDATA[]]包裹起来 -->
<!-- 属性值也可以使用value子节点进行配置 -->
<!--  
<bean>
<constructor-arg>
<value><![CDATA[<shanghai^>]]></value>
</constructor-arg>
</bean>
-->
<!-- 可以使用property的ref属性建立bean之间的引用关系。通过id关联-->
<!-- 
<property name="car" ref="car2"></property>
 -->
<!-- 
<property name="car">
<ref bean="car2"/>
</property>
 -->
 <bean id="person" class="com.yorkmass.spring.beans.Person">
 <property name="name" value="fort"></property>
 <property name="age" value="24"></property>
  <!-- 内部bean不能被外部引用，只能在内部使用 -->
 <property name="car" >
 <bean class="com.yorkmass.spring.beans.Car">
 <constructor-arg value="yorkmass"></constructor-arg>
 <constructor-arg value="changan"></constructor-arg>
 <constructor-arg value="20000" type="double"></constructor-arg>
 </bean>
 </property>

  <property name="car.maxSpeed" value="260"></property>
 </bean>
 <bean id="person2" class="com.yorkmass.spring.beans.Person">
 <constructor-arg value="jerry"></constructor-arg>
 <constructor-arg value="25"></constructor-arg>
 <!-- <constructor-arg><null/></constructor-arg> -->
 <constructor-arg ref="car"></constructor-arg>
 <property name="car.maxSpeed" value="250"></property>
 <!-- 对级联属性赋值 -->
 </bean>
 <!-- 测试如何配置集合属性 -->
 <bean id="person3" class="com.yorkmass.spring.beans.collections.Person">
 <property name="name" value="mike"></property>
 <property name="age"  value="25"></property>
 <property name="cars">
 <!-- 使用list节点为List类型的属性赋值 -->
 <list>
 <ref bean="car"/>
 <ref bean="car2"/>
 </list>
 </property>
 </bean>
 <!-- 配置Map属性值 -->
 <bean id="newPerson" class="com.yorkmass.spring.beans.collections.NewPerson">
 <property name="name" value="Rose"></property>
 <property name="age" value="28"></property>
 <property name="cars">
 <map>
 	<entry key="AA" value-ref="car"></entry>
 	<entry key="BB" value-ref="car2"></entry>
 </map>
 </property>
 </bean>
 
 <!-- 配置Properties属性值 -->
 <bean id="dataSource" class="com.yorkmass.spring.beans.collections.DataSource">
 	<property name="properties">
 	<!-- 使用props和prop子节点来为Properties属性赋值 -->
 		<props>
 			<prop key="user">root</prop>
 			<prop key="password">1234</prop>
 			<prop key="jdbcUrl">jdbc:mysql://test</prop>
 			<prop key="driverClass">com.mysql.jdbc.Driver</prop>
 		</props>
 	</property>
 </bean>
 
 <!-- 配置独立的集合bean, 以供多个bean进行引用,需要导入util命名空间-->
 <util:list id="cars">
 	<ref bean="car"/>
 	<ref bean="car2"/>
 </util:list>
 
 <bean id="person4" class="com.yorkmass.spring.beans.collections.Person">
 <property name="name" value="jack"></property>
 <property name="age" value="30"></property>
 <property name="cars" ref="cars"></property>
 </bean>
 
 <!-- 通过P命名空间为bean的属性赋值，需要先导入P命名空间,相对应传统的配置方式更加简洁-->
 <bean id="person5" class="com.yorkmass.spring.beans.collections.Person" p:age="30" p:name="queen" p:cars-ref="cars"></bean>
 
</beans>
